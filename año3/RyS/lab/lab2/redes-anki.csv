¿Por qué decimos que Python es "interpretado"? ¿Cual es la diferencia con un lenguaje "compilado"?; Python es un lenguaje interpretado, lo que significa que el código se ejecuta línea por línea, en lugar de compilar todo el código a la vez. La principal diferencia con los lenguajes compilados es que estos últimos convierten el código fuente en código ejecutable antes de la ejecución.; python
¿Que queremos decir cuando decimos que Python tiene "tipado dinámico"?; Python tiene tipado dinámico, lo que significa que el tipo de una variable es determinado en tiempo de ejecución. Esto permite una mayor flexibilidad y facilidad de uso, pero también puede llevar a errores si no se maneja correctamente.; python
¿Que queremos decir cuando decimos que Python tiene "garbage collector"?; Python tiene garbage collector, lo que significa que automáticamente libera la memoria que ya no se necesita en el programa. Esto hace que la gestión de memoria sea más fácil y menos propensa a errores, pero puede disminuir el rendimiento en algunos casos.; python
¿Por qué la indentación es importante en Python?; La indentación es importante en Python porque se utiliza para determinar la estructura del código y la jerarquía de los bloques de código. El uso incorrecto de la indentación puede llevar a errores sintácticos y de lógica.; python
¿Cual es la diferencia entre tupla, lista y diccionario?; Una tupla es inmutable y se define utilizando paréntesis (), una lista es mutable y se define utilizando corchetes [], y un diccionario es una colección de pares clave-valor, donde cada elemento tiene una clave única que se utiliza para acceder al valor correspondiente. Se define utilizando llaves {}. ; python
¿Qué quiere decir variables "inmutables"? ¿Cuales son estas variables? ¿Cuales no lo son?; Una variable inmutable es una variable cuyo valor no puede cambiar después de su creación. Las variables inmutables en Python incluyen números, cadenas y tuplas. Las variables mutables, como las listas y los diccionarios, pueden cambiar después de su creación.; python
¿Por qué es importante usar estructuras de try/except en aplicaciones de redes?; Es importante utilizar estructuras de try/except en aplicaciones de redes para manejar excepciones que puedan ocurrir durante la comunicación con otros dispositivos o servicios. Sin el manejo adecuado de excepciones, una aplicación puede fallar en caso de problemas de red o de servicio.; python
¿Qué es PEP8?; PEP8 es una guía de estilo para la escritura de código en Python. Proporciona recomendaciones sobre la estructura del código, la nomenclatura, el uso de espacios en blanco y otros aspectos de la escritura de código que pueden mejorar la legibilidad y la consistencia del código.; python
¿Cuantos espacios recomienda PEP8 para un nivel de indentación?; PEP8 recomienda el uso de cuatro espacios para un nivel de indentación en Python.; python
¿Cual es la ventaja de debuggear con depuradores en lugar de print?; La principal ventaja de debuggear con depuradores en lugar de print es que permite detener la ejecución del código en puntos específicos y examinar el estado del programa en ese momento. Esto puede hacer que la depuración sea más eficiente y más fácil de entender que el uso de declaraciones de print en todo el código.; python
¿Qué es un protocolo?; Un protocolo es un conjunto de reglas y normas que se aplican a la comunicación entre dos o más sistemas. Algunos ejemplos de protocolos son HTTP, FTP, SMTP, POP3, TCP/IP, DNS.; sockets
¿Qué es un socket?; Un socket es un punto de conexión entre dos sistemas a través de una red. Se utiliza para permitir la comunicación entre dos computadoras.; sockets
¿Cómo funciona el paradigma cliente/servidor?; El paradigma cliente/servidor describe la relación entre dos aplicaciones en la que una de ellas, el servidor, se encarga de procesar las solicitudes de la otra, el cliente.; sockets
¿Qué datos necesito para identificar univocamente un servidor en Internet?; Para identificar un servidor en Internet se necesita una dirección IP y un puerto. En Python, esto se expresa como una tupla ('dirección IP', puerto).; sockets
¿Por qué a veces usamos URLs en lugar IPs para identificar hosts?; Las URLs se utilizan para identificar hosts porque son más fáciles de recordar que las direcciones IP.; sockets
¿Por qué existen puertos reservados o de "servicios conocidos"?; Los puertos reservados o de "servicios conocidos" se utilizan para identificar de forma única los servicios que se ofrecen en un servidor.; sockets
¿Para qué se usan los puertos no registrados?; Los puertos no registrados se utilizan para aplicaciones que no están asociadas a un protocolo específico.; sockets
¿Cuál es la diferencia entre Stream (TCP) y Datagram (UDP), desde la perspectiva del socket?; Stream (TCP) proporciona una conexión segura entre los hosts, mientras que Datagram (UDP) no ofrece garantías sobre la entrega de los datos.; sockets
¿Qué es el protocolo HTTP?; HTTP es un protocolo de aplicación utilizado para la transferencia de archivos entre un servidor web y un navegador web.; sockets
¿Cuál es la diferencia entre HTTP y HTML?; HTTP es un protocolo de aplicación utilizado para la transferencia de archivos entre un servidor web y un navegador web, mientras que HTML es un lenguaje de marcado utilizado para crear documentos web.; sockets
La instrucción socket.send(), ¿Envía siempre todos los datos?; No, socket.send() sólo envía una parte de los datos, y retorna el número de bytes enviados.; sockets
¿Para qué sirve el método socket.sendall()?; El método socket.sendall() se utiliza para asegurar que todos los datos sean enviados correctamente, y retorna un valor booleano que indica si todos los datos fueron enviados.; sockets
La instrucción socket.recv(), ¿Recibe siempre todos los datos enviados por el host transmisor?; No, socket.recv() sólo recibe una parte de los datos, y toma un argumento que indica el número máximo de bytes que se pueden recibir.; sockets
¿Qué devuelve el método socket.accept()?; El método socket.accept() devuelve un objeto socket y una tupla con la dirección y el puerto del cliente.; sockets
¿Qué argumento toma el método socket.listen()?; El método socket.listen() toma un argumento que indica el número máximo de conexiones que se pueden establecer.; sockets
¿Qué es base64?; Base64 es una codificación de datos que se utiliza para convertir datos binarios en texto plano para su transmisión a través de protocolos que no soportan datos binarios.; sockets
¿Para què la usamos en el laboratorio?; En el laboratorio usamos Base64 para codificar un archivo antes de enviarlo a través de un socket.; sockets
¿Qué pasa si queremos enviar un archivo contiene los caracteres \r\n?; Si el archivo contiene los caracteres \r\n, debemos codificarlo en Base64 para evitar que sean interpretados como nuevas líneas.; sockets
¿Por qué es mayor el tamaño de los datos codificados en base64 que el dato original?; El tamaño de los datos codificados en Base64 es mayor que el del dato original porque cada byte se codifica como un carácter de 6 bits.; sockets
¿Qué estrategias se pueden considerar para un servidor multi-cliente?; Una estrategia para un servidor multi-cliente es el uso de subprocesos para procesar las solicitudes de los clientes en paralelo.; sockets
